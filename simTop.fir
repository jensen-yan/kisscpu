;buildInfoPackage: chisel3, version: 3.3.1, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit simTop : 
  module cpath : 
    input clock : Clock
    input reset : Reset
    output io : {flip dat : {inst : UInt<64>, br_eq : UInt<1>, br_lt : UInt<1>, br_ltu : UInt<1>, csr_eret : UInt<1>}, ctl : {stall : UInt<1>, pc_sel : UInt<3>, op1_sel : UInt<2>, op2_sel : UInt<2>, alu_fun : UInt<4>, wb_sel : UInt<2>, rf_wen : UInt<1>}}
    
    io.ctl.rf_wen is invalid @[cpath.scala 30:6]
    io.ctl.wb_sel is invalid @[cpath.scala 30:6]
    io.ctl.alu_fun is invalid @[cpath.scala 30:6]
    io.ctl.op2_sel is invalid @[cpath.scala 30:6]
    io.ctl.op1_sel is invalid @[cpath.scala 30:6]
    io.ctl.pc_sel is invalid @[cpath.scala 30:6]
    io.ctl.stall is invalid @[cpath.scala 30:6]
    io.dat.csr_eret is invalid @[cpath.scala 30:6]
    io.dat.br_ltu is invalid @[cpath.scala 30:6]
    io.dat.br_lt is invalid @[cpath.scala 30:6]
    io.dat.br_eq is invalid @[cpath.scala 30:6]
    io.dat.inst is invalid @[cpath.scala 30:6]
    node _T = and(io.dat.inst, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_1 = eq(UInt<6>("h037"), _T) @[Lookup.scala 31:38]
    node cs_val_inst = mux(_T_1, UInt<1>("h01"), UInt<1>("h01")) @[Lookup.scala 33:37]
    node cs_br_type = mux(_T_1, UInt<4>("h00"), UInt<4>("h00")) @[Lookup.scala 33:37]
    node cs_op1_sel = mux(_T_1, UInt<2>("h01"), UInt<2>("h00")) @[Lookup.scala 33:37]
    node cs_op2_sel = mux(_T_1, UInt<2>("h00"), UInt<2>("h00")) @[Lookup.scala 33:37]
    node cs0_0 = mux(_T_1, UInt<4>("h0b"), UInt<4>("h00")) @[Lookup.scala 33:37]
    node cs0_1 = mux(_T_1, UInt<2>("h00"), UInt<2>("h00")) @[Lookup.scala 33:37]
    node cs0_2 = mux(_T_1, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node cs0_3 = mux(_T_1, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node cs0_4 = mux(_T_1, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node cs0_5 = mux(_T_1, UInt<3>("h00"), UInt<3>("h00")) @[Lookup.scala 33:37]
    node cs0_6 = mux(_T_1, UInt<3>("h00"), UInt<3>("h00")) @[Lookup.scala 33:37]
    io.ctl.stall <= UInt<1>("h00") @[cpath.scala 54:19]
    io.ctl.pc_sel <= UInt<3>("h00") @[cpath.scala 55:19]
    io.ctl.op1_sel <= cs_op1_sel @[cpath.scala 56:19]
    io.ctl.op2_sel <= cs_op2_sel @[cpath.scala 57:19]
    io.ctl.alu_fun <= cs0_0 @[cpath.scala 58:19]
    io.ctl.wb_sel <= cs0_1 @[cpath.scala 59:19]
    io.ctl.rf_wen <= cs0_2 @[cpath.scala 60:19]
    node _T_2 = asUInt(reset) @[cpath.scala 62:9]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[cpath.scala 62:9]
    when _T_3 : @[cpath.scala 62:9]
      printf(clock, UInt<1>(1), "stall=[%d] pc_sel=[%d] op1=[%d] op2=[%d] alu=[%d] wb=[%d] rf_wen=[%d]\n", UInt<1>("h00"), UInt<3>("h00"), cs_op1_sel, cs_op2_sel, cs0_0, cs0_1, cs0_2) @[cpath.scala 62:9]
      skip @[cpath.scala 62:9]
    
  module alu : 
    input clock : Clock
    input reset : Reset
    output io : {flip alu_op : UInt<4>, flip src1 : UInt<64>, flip src2 : UInt<64>, result : UInt<64>}
    
    node shamt = bits(io.src2, 4, 0) @[alu.scala 18:22]
    node _T = eq(io.alu_op, UInt<4>("h01")) @[alu.scala 23:9]
    node _T_1 = add(io.src1, io.src2) @[alu.scala 23:31]
    node _T_2 = tail(_T_1, 1) @[alu.scala 23:31]
    node _T_3 = eq(io.alu_op, UInt<4>("h02")) @[alu.scala 24:9]
    node _T_4 = sub(io.src1, io.src2) @[alu.scala 24:31]
    node _T_5 = tail(_T_4, 1) @[alu.scala 24:31]
    node _T_6 = eq(io.alu_op, UInt<4>("h06")) @[alu.scala 25:9]
    node _T_7 = and(io.src1, io.src2) @[alu.scala 25:31]
    node _T_8 = eq(io.alu_op, UInt<4>("h07")) @[alu.scala 26:9]
    node _T_9 = or(io.src1, io.src2) @[alu.scala 26:31]
    node _T_10 = eq(io.alu_op, UInt<4>("h08")) @[alu.scala 27:9]
    node _T_11 = xor(io.src1, io.src2) @[alu.scala 27:31]
    node _T_12 = eq(io.alu_op, UInt<4>("h09")) @[alu.scala 28:9]
    node _T_13 = asSInt(io.src1) @[alu.scala 28:37]
    node _T_14 = asSInt(io.src2) @[alu.scala 28:54]
    node _T_15 = lt(_T_13, _T_14) @[alu.scala 28:40]
    node _T_16 = eq(io.alu_op, UInt<4>("h0a")) @[alu.scala 29:9]
    node _T_17 = lt(io.src1, io.src2) @[alu.scala 29:31]
    node _T_18 = eq(io.alu_op, UInt<4>("h03")) @[alu.scala 30:9]
    node _T_19 = dshl(io.src1, shamt) @[alu.scala 30:31]
    node _T_20 = bits(_T_19, 63, 0) @[alu.scala 30:40]
    node _T_21 = eq(io.alu_op, UInt<4>("h05")) @[alu.scala 31:9]
    node _T_22 = asSInt(io.src1) @[alu.scala 31:37]
    node _T_23 = dshr(_T_22, shamt) @[alu.scala 31:40]
    node _T_24 = asUInt(_T_23) @[alu.scala 31:56]
    node _T_25 = eq(io.alu_op, UInt<4>("h04")) @[alu.scala 32:9]
    node _T_26 = dshr(io.src1, shamt) @[alu.scala 32:31]
    node _T_27 = eq(io.alu_op, UInt<4>("h0b")) @[alu.scala 33:9]
    node _T_28 = mux(_T_27, io.src1, UInt<1>("h00")) @[Mux.scala 98:16]
    node _T_29 = mux(_T_25, _T_26, _T_28) @[Mux.scala 98:16]
    node _T_30 = mux(_T_21, _T_24, _T_29) @[Mux.scala 98:16]
    node _T_31 = mux(_T_18, _T_20, _T_30) @[Mux.scala 98:16]
    node _T_32 = mux(_T_16, _T_17, _T_31) @[Mux.scala 98:16]
    node _T_33 = mux(_T_12, _T_15, _T_32) @[Mux.scala 98:16]
    node _T_34 = mux(_T_10, _T_11, _T_33) @[Mux.scala 98:16]
    node _T_35 = mux(_T_8, _T_9, _T_34) @[Mux.scala 98:16]
    node _T_36 = mux(_T_6, _T_7, _T_35) @[Mux.scala 98:16]
    node _T_37 = mux(_T_3, _T_5, _T_36) @[Mux.scala 98:16]
    node _T_38 = mux(_T, _T_2, _T_37) @[Mux.scala 98:16]
    io.result <= _T_38 @[alu.scala 22:13]
    node _T_39 = asUInt(reset) @[alu.scala 36:9]
    node _T_40 = eq(_T_39, UInt<1>("h00")) @[alu.scala 36:9]
    when _T_40 : @[alu.scala 36:9]
      printf(clock, UInt<1>(1), "alu debug: func = %d, src1=[%x] src2=[%x] result=[%x]\n", io.alu_op, io.src1, io.src2, io.result) @[alu.scala 36:9]
      skip @[alu.scala 36:9]
    
  module dpath : 
    input clock : Clock
    input reset : Reset
    output io : {flip ctl : {stall : UInt<1>, pc_sel : UInt<3>, op1_sel : UInt<2>, op2_sel : UInt<2>, alu_fun : UInt<4>, wb_sel : UInt<2>, rf_wen : UInt<1>}, dat : {inst : UInt<64>, br_eq : UInt<1>, br_lt : UInt<1>, br_ltu : UInt<1>, csr_eret : UInt<1>}, instReadIO : {addr : UInt<64>, flip data : UInt<64>, en : UInt<1>}, dataReadIO : {addr : UInt<64>, flip data : UInt<64>, en : UInt<1>}, dataWriteIO : {addr : UInt<64>, data : UInt<64>, en : UInt<1>}}
    
    io.dataWriteIO.en is invalid @[dpath.scala 31:6]
    io.dataWriteIO.data is invalid @[dpath.scala 31:6]
    io.dataWriteIO.addr is invalid @[dpath.scala 31:6]
    io.dataReadIO.en is invalid @[dpath.scala 31:6]
    io.dataReadIO.data is invalid @[dpath.scala 31:6]
    io.dataReadIO.addr is invalid @[dpath.scala 31:6]
    io.instReadIO.en is invalid @[dpath.scala 31:6]
    io.instReadIO.data is invalid @[dpath.scala 31:6]
    io.instReadIO.addr is invalid @[dpath.scala 31:6]
    io.dat.csr_eret is invalid @[dpath.scala 31:6]
    io.dat.br_ltu is invalid @[dpath.scala 31:6]
    io.dat.br_lt is invalid @[dpath.scala 31:6]
    io.dat.br_eq is invalid @[dpath.scala 31:6]
    io.dat.inst is invalid @[dpath.scala 31:6]
    io.ctl.rf_wen is invalid @[dpath.scala 31:6]
    io.ctl.wb_sel is invalid @[dpath.scala 31:6]
    io.ctl.alu_fun is invalid @[dpath.scala 31:6]
    io.ctl.op2_sel is invalid @[dpath.scala 31:6]
    io.ctl.op1_sel is invalid @[dpath.scala 31:6]
    io.ctl.pc_sel is invalid @[dpath.scala 31:6]
    io.ctl.stall is invalid @[dpath.scala 31:6]
    wire pc_next : UInt<64> @[dpath.scala 34:30]
    wire pc_plus4 : UInt<64> @[dpath.scala 35:30]
    reg pc_reg : UInt<64>, clock with : (reset => (reset, UInt<32>("h080000000"))) @[dpath.scala 39:23]
    pc_reg <= pc_next @[dpath.scala 40:10]
    node _T = add(pc_reg, UInt<64>("h08")) @[dpath.scala 42:23]
    node _T_1 = tail(_T, 1) @[dpath.scala 42:23]
    pc_plus4 <= _T_1 @[dpath.scala 42:12]
    pc_next <= pc_plus4 @[dpath.scala 43:11]
    io.instReadIO.addr <= pc_reg @[dpath.scala 47:22]
    io.instReadIO.en <= UInt<1>("h01") @[dpath.scala 48:20]
    wire inst : UInt<64> @[dpath.scala 49:18]
    inst <= io.instReadIO.data @[dpath.scala 50:8]
    node rs1_addr = bits(inst, 19, 15) @[dpath.scala 53:22]
    node rs2_addr = bits(inst, 24, 20) @[dpath.scala 54:22]
    node wb_addr = bits(inst, 11, 7) @[dpath.scala 55:22]
    wire wb_data : UInt<64> @[dpath.scala 57:21]
    cmem regfile2 : UInt<64>[32] @[dpath.scala 61:21]
    node _T_2 = neq(wb_addr, UInt<1>("h00")) @[dpath.scala 63:28]
    node _T_3 = and(io.ctl.rf_wen, _T_2) @[dpath.scala 63:16]
    when _T_3 : @[dpath.scala 64:3]
      infer mport _T_4 = regfile2[wb_addr], clock @[dpath.scala 65:13]
      _T_4 <= wb_data @[dpath.scala 65:23]
      skip @[dpath.scala 64:3]
    node _T_5 = neq(rs1_addr, UInt<1>("h00")) @[dpath.scala 67:32]
    infer mport _T_6 = regfile2[rs1_addr], clock @[dpath.scala 67:50]
    node rs1_data = mux(_T_5, _T_6, UInt<64>("h00")) @[dpath.scala 67:21]
    node _T_7 = neq(rs2_addr, UInt<1>("h00")) @[dpath.scala 68:32]
    infer mport _T_8 = regfile2[rs2_addr], clock @[dpath.scala 68:50]
    node rs2_data = mux(_T_7, _T_8, UInt<64>("h00")) @[dpath.scala 68:21]
    infer mport _T_9 = regfile2[UInt<1>("h00")], clock @[dpath.scala 69:67]
    infer mport _T_10 = regfile2[UInt<1>("h01")], clock @[dpath.scala 69:67]
    infer mport _T_11 = regfile2[UInt<2>("h02")], clock @[dpath.scala 69:67]
    infer mport _T_12 = regfile2[UInt<2>("h03")], clock @[dpath.scala 69:67]
    infer mport _T_13 = regfile2[UInt<3>("h04")], clock @[dpath.scala 69:67]
    infer mport _T_14 = regfile2[UInt<3>("h05")], clock @[dpath.scala 69:67]
    infer mport _T_15 = regfile2[UInt<3>("h06")], clock @[dpath.scala 69:67]
    infer mport _T_16 = regfile2[UInt<3>("h07")], clock @[dpath.scala 69:67]
    infer mport _T_17 = regfile2[UInt<4>("h08")], clock @[dpath.scala 69:67]
    infer mport _T_18 = regfile2[UInt<4>("h09")], clock @[dpath.scala 69:67]
    infer mport _T_19 = regfile2[UInt<4>("h0a")], clock @[dpath.scala 69:67]
    infer mport _T_20 = regfile2[UInt<4>("h0b")], clock @[dpath.scala 69:67]
    infer mport _T_21 = regfile2[UInt<4>("h0c")], clock @[dpath.scala 69:67]
    infer mport _T_22 = regfile2[UInt<4>("h0d")], clock @[dpath.scala 69:67]
    infer mport _T_23 = regfile2[UInt<4>("h0e")], clock @[dpath.scala 69:67]
    infer mport _T_24 = regfile2[UInt<4>("h0f")], clock @[dpath.scala 69:67]
    infer mport _T_25 = regfile2[UInt<5>("h010")], clock @[dpath.scala 69:67]
    infer mport _T_26 = regfile2[UInt<5>("h011")], clock @[dpath.scala 69:67]
    infer mport _T_27 = regfile2[UInt<5>("h012")], clock @[dpath.scala 69:67]
    infer mport _T_28 = regfile2[UInt<5>("h013")], clock @[dpath.scala 69:67]
    infer mport _T_29 = regfile2[UInt<5>("h014")], clock @[dpath.scala 69:67]
    infer mport _T_30 = regfile2[UInt<5>("h015")], clock @[dpath.scala 69:67]
    infer mport _T_31 = regfile2[UInt<5>("h016")], clock @[dpath.scala 69:67]
    infer mport _T_32 = regfile2[UInt<5>("h017")], clock @[dpath.scala 69:67]
    infer mport _T_33 = regfile2[UInt<5>("h018")], clock @[dpath.scala 69:67]
    infer mport _T_34 = regfile2[UInt<5>("h019")], clock @[dpath.scala 69:67]
    infer mport _T_35 = regfile2[UInt<5>("h01a")], clock @[dpath.scala 69:67]
    infer mport _T_36 = regfile2[UInt<5>("h01b")], clock @[dpath.scala 69:67]
    infer mport _T_37 = regfile2[UInt<5>("h01c")], clock @[dpath.scala 69:67]
    infer mport _T_38 = regfile2[UInt<5>("h01d")], clock @[dpath.scala 69:67]
    infer mport _T_39 = regfile2[UInt<5>("h01e")], clock @[dpath.scala 69:67]
    infer mport _T_40 = regfile2[UInt<5>("h01f")], clock @[dpath.scala 69:67]
    wire _T_41 : UInt<64>[32] @[dpath.scala 69:32]
    _T_41[0] <= _T_9 @[dpath.scala 69:32]
    _T_41[1] <= _T_10 @[dpath.scala 69:32]
    _T_41[2] <= _T_11 @[dpath.scala 69:32]
    _T_41[3] <= _T_12 @[dpath.scala 69:32]
    _T_41[4] <= _T_13 @[dpath.scala 69:32]
    _T_41[5] <= _T_14 @[dpath.scala 69:32]
    _T_41[6] <= _T_15 @[dpath.scala 69:32]
    _T_41[7] <= _T_16 @[dpath.scala 69:32]
    _T_41[8] <= _T_17 @[dpath.scala 69:32]
    _T_41[9] <= _T_18 @[dpath.scala 69:32]
    _T_41[10] <= _T_19 @[dpath.scala 69:32]
    _T_41[11] <= _T_20 @[dpath.scala 69:32]
    _T_41[12] <= _T_21 @[dpath.scala 69:32]
    _T_41[13] <= _T_22 @[dpath.scala 69:32]
    _T_41[14] <= _T_23 @[dpath.scala 69:32]
    _T_41[15] <= _T_24 @[dpath.scala 69:32]
    _T_41[16] <= _T_25 @[dpath.scala 69:32]
    _T_41[17] <= _T_26 @[dpath.scala 69:32]
    _T_41[18] <= _T_27 @[dpath.scala 69:32]
    _T_41[19] <= _T_28 @[dpath.scala 69:32]
    _T_41[20] <= _T_29 @[dpath.scala 69:32]
    _T_41[21] <= _T_30 @[dpath.scala 69:32]
    _T_41[22] <= _T_31 @[dpath.scala 69:32]
    _T_41[23] <= _T_32 @[dpath.scala 69:32]
    _T_41[24] <= _T_33 @[dpath.scala 69:32]
    _T_41[25] <= _T_34 @[dpath.scala 69:32]
    _T_41[26] <= _T_35 @[dpath.scala 69:32]
    _T_41[27] <= _T_36 @[dpath.scala 69:32]
    _T_41[28] <= _T_37 @[dpath.scala 69:32]
    _T_41[29] <= _T_38 @[dpath.scala 69:32]
    _T_41[30] <= _T_39 @[dpath.scala 69:32]
    _T_41[31] <= _T_40 @[dpath.scala 69:32]
    node imm_i = bits(inst, 31, 20) @[dpath.scala 73:19]
    node _T_42 = bits(inst, 31, 25) @[dpath.scala 74:23]
    node _T_43 = bits(inst, 11, 7) @[dpath.scala 74:37]
    node imm_s = cat(_T_42, _T_43) @[Cat.scala 29:58]
    node _T_44 = bits(inst, 31, 31) @[dpath.scala 75:23]
    node _T_45 = bits(inst, 7, 7) @[dpath.scala 75:33]
    node _T_46 = bits(inst, 30, 25) @[dpath.scala 75:42]
    node _T_47 = bits(inst, 11, 8) @[dpath.scala 75:55]
    node _T_48 = cat(_T_46, _T_47) @[Cat.scala 29:58]
    node _T_49 = cat(_T_44, _T_45) @[Cat.scala 29:58]
    node imm_b = cat(_T_49, _T_48) @[Cat.scala 29:58]
    node imm_u = bits(inst, 31, 12) @[dpath.scala 76:19]
    node _T_50 = bits(inst, 31, 31) @[dpath.scala 77:23]
    node _T_51 = bits(inst, 19, 12) @[dpath.scala 77:33]
    node _T_52 = bits(inst, 20, 20) @[dpath.scala 77:46]
    node _T_53 = bits(inst, 30, 21) @[dpath.scala 77:56]
    node _T_54 = cat(_T_52, _T_53) @[Cat.scala 29:58]
    node _T_55 = cat(_T_50, _T_51) @[Cat.scala 29:58]
    node imm_j = cat(_T_55, _T_54) @[Cat.scala 29:58]
    node _T_56 = mux(UInt<1>("h00"), UInt<27>("h07ffffff"), UInt<27>("h00")) @[Bitwise.scala 72:12]
    node _T_57 = bits(inst, 19, 15) @[dpath.scala 78:37]
    node imm_z = cat(_T_56, _T_57) @[Cat.scala 29:58]
    node _T_58 = bits(imm_i, 11, 11) @[dpath.scala 81:37]
    node _T_59 = bits(_T_58, 0, 0) @[Bitwise.scala 72:15]
    node _T_60 = mux(_T_59, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node imm_i_sext = cat(_T_60, imm_i) @[Cat.scala 29:58]
    node _T_61 = bits(imm_s, 11, 11) @[dpath.scala 82:37]
    node _T_62 = bits(_T_61, 0, 0) @[Bitwise.scala 72:15]
    node _T_63 = mux(_T_62, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node imm_s_sext = cat(_T_63, imm_s) @[Cat.scala 29:58]
    node _T_64 = bits(imm_b, 11, 11) @[dpath.scala 83:37]
    node _T_65 = bits(_T_64, 0, 0) @[Bitwise.scala 72:15]
    node _T_66 = mux(_T_65, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node _T_67 = cat(_T_66, imm_b) @[Cat.scala 29:58]
    node imm_b_sext = cat(_T_67, UInt<1>("h00")) @[Cat.scala 29:58]
    node _T_68 = bits(imm_j, 19, 19) @[dpath.scala 85:37]
    node _T_69 = bits(_T_68, 0, 0) @[Bitwise.scala 72:15]
    node _T_70 = mux(_T_69, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
    node _T_71 = cat(_T_70, imm_j) @[Cat.scala 29:58]
    node imm_j_sext = cat(_T_71, UInt<1>("h00")) @[Cat.scala 29:58]
    node _T_72 = bits(imm_u, 19, 19) @[dpath.scala 88:38]
    node _T_73 = bits(_T_72, 0, 0) @[Bitwise.scala 72:15]
    node _T_74 = mux(_T_73, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
    node _T_75 = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node _T_76 = cat(_T_74, imm_u) @[Cat.scala 29:58]
    node alu_op1 = cat(_T_76, _T_75) @[Cat.scala 29:58]
    node _T_77 = asUInt(reset) @[dpath.scala 101:9]
    node _T_78 = eq(_T_77, UInt<1>("h00")) @[dpath.scala 101:9]
    when _T_78 : @[dpath.scala 101:9]
      printf(clock, UInt<1>(1), "imm_u  = [%x] sel=[%d] op1=[%x]\n", alu_op1, io.ctl.op1_sel, alu_op1) @[dpath.scala 101:9]
      skip @[dpath.scala 101:9]
    node _T_79 = eq(io.ctl.op2_sel, UInt<2>("h00")) @[dpath.scala 104:21]
    node _T_80 = eq(io.ctl.op2_sel, UInt<2>("h03")) @[dpath.scala 105:21]
    node _T_81 = eq(io.ctl.op2_sel, UInt<2>("h01")) @[dpath.scala 106:21]
    node _T_82 = eq(io.ctl.op2_sel, UInt<2>("h02")) @[dpath.scala 107:21]
    node _T_83 = mux(_T_82, imm_s_sext, UInt<1>("h00")) @[Mux.scala 98:16]
    node _T_84 = mux(_T_81, imm_i_sext, _T_83) @[Mux.scala 98:16]
    node _T_85 = mux(_T_80, pc_reg, _T_84) @[Mux.scala 98:16]
    node alu_op2 = mux(_T_79, rs2_data, _T_85) @[Mux.scala 98:16]
    wire alu_out : UInt<64> @[dpath.scala 113:23]
    inst alu of alu @[dpath.scala 114:19]
    alu.clock <= clock
    alu.reset <= reset
    alu.io.alu_op <= io.ctl.alu_fun @[dpath.scala 115:17]
    alu.io.src1 <= alu_op1 @[dpath.scala 116:17]
    alu.io.src2 <= alu_op2 @[dpath.scala 117:17]
    alu_out <= alu.io.result @[dpath.scala 118:17]
    node _T_86 = asUInt(reset) @[dpath.scala 119:9]
    node _T_87 = eq(_T_86, UInt<1>("h00")) @[dpath.scala 119:9]
    when _T_87 : @[dpath.scala 119:9]
      printf(clock, UInt<1>(1), "alu2 debug: func = %d, src1=[%x] src2=[%x] result=[%x]\n", io.ctl.alu_fun, alu_op1, alu_op2, alu_out) @[dpath.scala 119:9]
      skip @[dpath.scala 119:9]
    wb_data <= alu_out @[dpath.scala 141:11]
    io.dat.inst <= inst @[dpath.scala 149:17]
    node _T_88 = eq(rs1_data, rs2_data) @[dpath.scala 150:30]
    io.dat.br_eq <= _T_88 @[dpath.scala 150:17]
    node _T_89 = asSInt(rs1_data) @[dpath.scala 151:36]
    node _T_90 = asSInt(rs2_data) @[dpath.scala 151:56]
    node _T_91 = lt(_T_89, _T_90) @[dpath.scala 151:39]
    io.dat.br_lt <= _T_91 @[dpath.scala 151:17]
    node _T_92 = lt(rs1_data, rs2_data) @[dpath.scala 152:39]
    io.dat.br_ltu <= _T_92 @[dpath.scala 152:17]
    io.dataWriteIO.en <= UInt<1>("h01") @[dpath.scala 154:21]
    io.dataWriteIO.addr <= alu_out @[dpath.scala 155:23]
    io.dataWriteIO.data <= rs2_data @[dpath.scala 156:23]
    infer mport _T_93 = regfile2[UInt<3>("h05")], clock @[dpath.scala 177:13]
    node _T_94 = asUInt(reset) @[dpath.scala 160:9]
    node _T_95 = eq(_T_94, UInt<1>("h00")) @[dpath.scala 160:9]
    when _T_95 : @[dpath.scala 160:9]
      printf(clock, UInt<1>(1), "pc=[%x] W[r%d=%x][%d] Op1=[r%d][%x] Op2=[r%d][%x] inst=[%x] op1=[%x] op2=[%x] fun = [%d] out=[%x] addr=[%x] wb_data=[%x] rf[5] = [%x]\n", pc_reg, wb_addr, wb_data, io.ctl.rf_wen, rs1_addr, alu_op1, rs2_addr, alu_op2, inst, alu_op1, alu_op2, io.ctl.alu_fun, alu_out, wb_addr, wb_data, _T_93) @[dpath.scala 160:9]
      skip @[dpath.scala 160:9]
    
  module top : 
    input clock : Clock
    input reset : Reset
    output io : {instReadIO : {addr : UInt<64>, flip data : UInt<64>, en : UInt<1>}, dataReadIO : {addr : UInt<64>, flip data : UInt<64>, en : UInt<1>}, dataWriteIO : {addr : UInt<64>, data : UInt<64>, en : UInt<1>}}
    
    inst cpath of cpath @[top.scala 15:21]
    cpath.clock <= clock
    cpath.reset <= reset
    inst dpath of dpath @[top.scala 16:21]
    dpath.clock <= clock
    dpath.reset <= reset
    io.instReadIO.en <= dpath.io.instReadIO.en @[top.scala 19:17]
    dpath.io.instReadIO.data <= io.instReadIO.data @[top.scala 19:17]
    io.instReadIO.addr <= dpath.io.instReadIO.addr @[top.scala 19:17]
    io.dataReadIO.en <= dpath.io.dataReadIO.en @[top.scala 20:17]
    dpath.io.dataReadIO.data <= io.dataReadIO.data @[top.scala 20:17]
    io.dataReadIO.addr <= dpath.io.dataReadIO.addr @[top.scala 20:17]
    io.dataWriteIO.en <= dpath.io.dataWriteIO.en @[top.scala 21:18]
    io.dataWriteIO.data <= dpath.io.dataWriteIO.data @[top.scala 21:18]
    io.dataWriteIO.addr <= dpath.io.dataWriteIO.addr @[top.scala 21:18]
    dpath.io.ctl.rf_wen <= cpath.io.ctl.rf_wen @[top.scala 24:16]
    dpath.io.ctl.wb_sel <= cpath.io.ctl.wb_sel @[top.scala 24:16]
    dpath.io.ctl.alu_fun <= cpath.io.ctl.alu_fun @[top.scala 24:16]
    dpath.io.ctl.op2_sel <= cpath.io.ctl.op2_sel @[top.scala 24:16]
    dpath.io.ctl.op1_sel <= cpath.io.ctl.op1_sel @[top.scala 24:16]
    dpath.io.ctl.pc_sel <= cpath.io.ctl.pc_sel @[top.scala 24:16]
    dpath.io.ctl.stall <= cpath.io.ctl.stall @[top.scala 24:16]
    cpath.io.dat.csr_eret <= dpath.io.dat.csr_eret @[top.scala 25:16]
    cpath.io.dat.br_ltu <= dpath.io.dat.br_ltu @[top.scala 25:16]
    cpath.io.dat.br_lt <= dpath.io.dat.br_lt @[top.scala 25:16]
    cpath.io.dat.br_eq <= dpath.io.dat.br_eq @[top.scala 25:16]
    cpath.io.dat.inst <= dpath.io.dat.inst @[top.scala 25:16]
    
  module simTop : 
    input clock : Clock
    input reset : UInt<1>
    output io : {diffTestIO : {regfile : UInt<64>[32], PC : UInt<64>}, topIO : {instReadIO : {addr : UInt<64>, flip data : UInt<64>, en : UInt<1>}, dataReadIO : {addr : UInt<64>, flip data : UInt<64>, en : UInt<1>}, dataWriteIO : {addr : UInt<64>, data : UInt<64>, en : UInt<1>}}}
    
    io.topIO.dataWriteIO.en is invalid @[simTop.scala 13:6]
    io.topIO.dataWriteIO.data is invalid @[simTop.scala 13:6]
    io.topIO.dataWriteIO.addr is invalid @[simTop.scala 13:6]
    io.topIO.dataReadIO.en is invalid @[simTop.scala 13:6]
    io.topIO.dataReadIO.data is invalid @[simTop.scala 13:6]
    io.topIO.dataReadIO.addr is invalid @[simTop.scala 13:6]
    io.topIO.instReadIO.en is invalid @[simTop.scala 13:6]
    io.topIO.instReadIO.data is invalid @[simTop.scala 13:6]
    io.topIO.instReadIO.addr is invalid @[simTop.scala 13:6]
    io.diffTestIO.PC is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[0] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[1] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[2] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[3] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[4] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[5] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[6] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[7] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[8] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[9] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[10] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[11] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[12] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[13] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[14] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[15] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[16] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[17] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[18] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[19] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[20] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[21] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[22] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[23] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[24] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[25] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[26] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[27] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[28] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[29] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[30] is invalid @[simTop.scala 13:6]
    io.diffTestIO.regfile[31] is invalid @[simTop.scala 13:6]
    inst mycoretop of top @[simTop.scala 15:25]
    mycoretop.clock <= clock
    mycoretop.reset <= reset
    io.topIO.dataWriteIO.en <= mycoretop.io.dataWriteIO.en @[simTop.scala 20:12]
    io.topIO.dataWriteIO.data <= mycoretop.io.dataWriteIO.data @[simTop.scala 20:12]
    io.topIO.dataWriteIO.addr <= mycoretop.io.dataWriteIO.addr @[simTop.scala 20:12]
    io.topIO.dataReadIO.en <= mycoretop.io.dataReadIO.en @[simTop.scala 20:12]
    mycoretop.io.dataReadIO.data <= io.topIO.dataReadIO.data @[simTop.scala 20:12]
    io.topIO.dataReadIO.addr <= mycoretop.io.dataReadIO.addr @[simTop.scala 20:12]
    io.topIO.instReadIO.en <= mycoretop.io.instReadIO.en @[simTop.scala 20:12]
    mycoretop.io.instReadIO.data <= io.topIO.instReadIO.data @[simTop.scala 20:12]
    io.topIO.instReadIO.addr <= mycoretop.io.instReadIO.addr @[simTop.scala 20:12]
    
